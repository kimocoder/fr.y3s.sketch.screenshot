{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./src/screenshot.js","webpack://exports/external \"sketch/ui\""],"names":["AdbTool","context","scriptPath","split","slice","join","runAdbScreenshot","file","runCommandline","NSImage","alloc","initWithData_","readDataToEndOfFile","runAdbDevices","NSString","initWithData_encoding","NSUTF8StringEncoding","getNbAdbDevices","adbDevices","componentsSeparatedByCharactersInSet","NSCharacterSet","newlineCharacterSet","count","launchPath","args","task","NSTask","init","pipe","NSPipe","setStandardOutput","setStandardError","setLaunchPath","setArguments","fileHandleForReading","launch","insertImageAsNewShape","image","visibleContentRect","document","contentDrawView","width","size","height","rect","NSMakeRect","origin","x","y","shape","MSRectangleShape","initWithFrame","style","addStylePartOfType","fill","fills","firstObject","setFillType","setImage","MSImageData","initWithImage","setName","currentPage","addLayer","ui","fillSelectedShapesWithImage","selection","i","layer","firstEnabledFill","setPatternFillType","fillAndroidScreenshot","nbAdbDevices","insertAndroidScreenshot"],"mappings":"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","file":"screenshot.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/screenshot.js\");\n","import * as ui from 'sketch/ui';\n\nconst AdbTool = context.scriptPath.split(\"/\").slice(0, -2).join(\"/\") + \"/Resources/adb\"\n\n/**\n * Run adb command to take screenshot\n *\n * @returns NSImage\n */\nfunction runAdbScreenshot() {\n  let file = runCommandline(AdbTool, [\"exec-out\", \"screencap\", \"-p\"])\n  return NSImage.alloc().initWithData_(file.readDataToEndOfFile())\n}\n\n/**\n * Run adb command to retrieve connected devices\n *\n * @returns NSString\n */\nfunction runAdbDevices() {\n  let file = runCommandline(AdbTool, [\"devices\"])\n  return NSString.alloc().initWithData_encoding(file.readDataToEndOfFile(), NSUTF8StringEncoding)\n}\n\n/**\n * Split adb devices result to count devices\n *\n * @returns NSInteger\n */\nfunction getNbAdbDevices() {\n  let adbDevices = runAdbDevices()\n  return adbDevices.componentsSeparatedByCharactersInSet(NSCharacterSet.newlineCharacterSet()).count() - 3\n}\n\n/**\n * Run system command\n *\n * @param {*} launchPath : Command path\n * @param {*} args : Arguments\n * @returns NSFileHandle\n */\nfunction runCommandline(launchPath, args) {\n\n  // Task\n  var task = NSTask.alloc().init();\n\n  // Pipe\n  var pipe = NSPipe.alloc().init();\n\n  // Redirect to pipe\n  task.setStandardOutput(pipe);\n  task.setStandardError(pipe);\n\n  // Prepare command\n  task.setLaunchPath(launchPath)\n  task.setArguments(args)\n\n  // Reader for response\n  var file = pipe.fileHandleForReading()\n\n  // Launch command\n  task.launch()\n\n  // Return handle\n  return file\n}\n\n/**\n * Insert image as new shape and add it to current page\n *\n * @param {*} context : The sketch context\n * @param {*} image : The image\n */\nfunction insertImageAsNewShape(context, image) {\n\n  // Visible rect\n  const visibleContentRect = context.document.contentDrawView().visibleContentRect()\n  const width = image.size().width\n  const height = image.size().height\n\n  // Create rect into center of the visible content rect\n  const rect = NSMakeRect(\n    visibleContentRect.origin.x + (visibleContentRect.size.width - width) / 2,\n    visibleContentRect.origin.y + (visibleContentRect.size.height - height) / 2,\n    width,\n    height\n  )\n\n  // Create new shape\n  const shape = MSRectangleShape.alloc().initWithFrame(rect)\n\n  // Add style type 0 to shape styles\n  shape.style().addStylePartOfType(0)\n\n  // Retrieve previous addded fill\n  let fill = shape.style()\n    .fills()\n    .firstObject();\n\n  // Set fill type to bitmap\n  fill.setFillType(4);\n\n  // Set image to fill\n  fill.setImage(MSImageData.alloc().initWithImage(image));\n\n  // Update shape name\n  shape.setName(\"Android screenshot\")\n\n  // Add shape to current page\n  context.document.currentPage().addLayer(shape)\n\n  ui.message(\"Screenshot successful\")\n}\n\n/**\n * Fill selected shapes with the image\n *\n * @param {*} context : The sketch context\n * @param {*} image : The image\n */\nfunction fillSelectedShapesWithImage(context, image) {\n\n  let selection = context.selection\n\n  if (selection.count() == 0) {\n    ui.message(\"Select at least one layer\");\n  } else {\n    for (let i = 0; i < selection.count(); i++) {\n      let layer = selection[i]\n      if (!layer.style().firstEnabledFill()) {\n        layer.style().addStylePartOfType(0)\n      }\n\n      let fill = layer\n        .style()\n        .fills()\n        .firstObject();\n      fill.setFillType(4);\n      fill.setImage(MSImageData.alloc().initWithImage(image));\n      fill.setPatternFillType(1);\n    }\n    ui.message(\"Screenshot successful\")\n  }\n}\n\nlet fillAndroidScreenshot = (context) => {\n\n  let nbAdbDevices = getNbAdbDevices()\n\n  if (nbAdbDevices > 0) {\n    let image = runAdbScreenshot()\n    fillSelectedShapesWithImage(context, image)\n  } else {\n    ui.alert(\"Android screenshot\", \"You must have an Android device connected over USB with usb/debugging activated\")\n  }\n}\n\nlet insertAndroidScreenshot = (context) => {\n\n  let nbAdbDevices = getNbAdbDevices()\n\n  if (nbAdbDevices > 0) {\n    let image = runAdbScreenshot()\n    insertImageAsNewShape(context, image)\n  } else {\n    ui.alert(\"Android screenshot\", \"You must have an Android device connected over USB with usb/debugging activated\")\n  }\n}\n\nexport {\n  fillAndroidScreenshot,\n  insertAndroidScreenshot\n}","module.exports = require(\"sketch/ui\");"],"sourceRoot":""}